version: '1'
stages:
  git-clone-javabaserepo:
    type: stackroute/git/clone
    input:
      REPOSITORY_URL: "ssh://git@gitlab-wd.stackroute.in:2222/hobbes-boilerplates/baserepo-openJDK8MavenApp.git"
      REPOSITORY_REF: master
      REPOSITORY_REF_TYPE: "branch"
      WORKSPACE: "{{context.WORKSPACE}}/java-baserepo"
  git-clone-submission:
    type: stackroute/git/clone
    input:
      REPOSITORY_URL: "{{payload.submissionRepoUrl}}"
      REPOSITORY_REF: "{{payload.submissionRepoRef}}"
      REPOSITORY_REF_TYPE: "{{payload.submissionRepoReftype}}"
      WORKSPACE: "{{context.WORKSPACE}}/submission"
  git-clone-solution:
    type: stackroute/git/clone
    input:
      REPOSITORY_URL: "{{payload.solutionRepoUrl}}"
      REPOSITORY_REF: "{{payload.solutionRepoRef}}"
      REPOSITORY_REF_TYPE: "{{payload.solutionRepoReftype}}"
      WORKSPACE: "{{context.WORKSPACE}}/solution"
  delete-data-directory:
    type: stackroute/unix/delete
    input:
      WORKSPACE: "{{context.WORKSPACE}}/submission"
      FILES: data
    depends_on:
      - git-clone-submission
  link-data-directory:
    type: stackroute/unix/link
    input:
      SOURCE: /data
      DESTINATION: "{{context.WORKSPACE}}/submission"
    depends_on:
      - delete-data-directory
  delete-output-directory:
    type: stackroute/unix/delete
    input:
      WORKSPACE: "{{context.WORKSPACE}}/submission"
      FILES: output
    depends_on:
      - git-clone-submission
  create-output-directory:
    type: stackroute/unix/mkdir
    input:
      WORKSPACE: "{{context.WORKSPACE}}/submission"
      FILES: output
    depends_on:
      - delete-output-directory
  copy-pmd-rules:
    type: stackroute/unix/copy
    input:
      SOURCE: "java-baserepo/pmdSpringRules.xml"
      DESTINATION: "submission/pmdSpringRules.xml"
    depends_on:
      - git-clone-javabaserepo
      - git-clone-submission
  safecopy-pmd-rules:
    type: stackroute/unix/safecopy
    input:
      SOURCE: "solution/pmdSpringRules.xml"
      DESTINATION: "submission/pmdSpringRules.xml"
    depends_on:
      - copy-pmd-rules
      - git-clone-submission
      - git-clone-solution
  run-pmd:
    type: stackroute/openjdk8maven/pmd
    input:
      WORKSPACE: "{{context.WORKSPACE}}/submission"
      RULES_FILE: "pmdSpringRules.xml"
      REPORT_OUTPUT_FILE: "pmdResult.xml"
      PMD_HOME: "/pmd"
      # scan code from root folder before executing any command level evaluations
      BASE_PATH: "{{context.WORKSPACE}}/submission/"
    output:
      payload:
        output:
          lint:
            pmd:
              status: \{\{EXITCODE\}\}
              output: \{\{OUTPUT\}\}
              errors: \{\{ERRORS\}\}
              summary: \{\{SUMMARY\}\}
    depends_on:
      - safecopy-pmd-rules
  copy-commandertests-to-submission:
    type: stackroute/unix/findandcopy
    input:
      WORKSPACE: "{{context.WORKSPACE}}"
      SOURCE_ROOT_DIRECTORY: "{{context.WORKSPACE}}/solution"
      DIRECTORY_NAME_TO_COPY: "commander"
      TARGET_ROOT_DIRECTORY: "{{context.WORKSPACE}}/submission"
    depends_on:
      - run-pmd
  build-project:
    type: stackroute/openjdk8mysql/build
    input:
      WORKSPACE: "{{context.WORKSPACE}}/submission"
      BUILD_OPTIONS: -DskipTests=true
    output:
      payload:
        output:
          build:
            status: \{\{EXITCODE\}\}
            output: \{\{OUTPUT\}\}
            errors: \{\{ERRORS\}\}
            summary: \{\{SUMMARY\}\}
    depends_on:
      - git-clone-submission
      - git-clone-solution
      - link-data-directory
      - create-output-directory
      - copy-commandertests-to-submission
  run-commander-tests:
    type: stackroute/openjdk8mysql/junit
    input:
      WORKSPACE: "{{context.WORKSPACE}}/submission"
      TEST_OUTPUT_FILE_PATTERN: "**/target/**/TEST*commander*.xml"
      IGNORE_FILE_PATTERN: ""
    output:
      payload:
        output:
          tests:
            commanderTests:
              status: \{\{EXITCODE\}\}
              output: \{\{OUTPUT\}\}
              errors: \{\{ERRORS\}\}
              summary: \{\{SUMMARY\}\}
    depends_on:
      - build-project
  run-cadet-tests:
    type: stackroute/openjdk8mysql/junit
    input:
      WORKSPACE: "{{context.WORKSPACE}}/submission"
      TEST_OUTPUT_FILE_PATTERN: "**/target/**/TEST*.xml"
      IGNORE_FILE_PATTERN: "**/target/**/TEST*commander*.xml"
    output:
      payload:
        output:
          tests:
            cadetTests:
              status: \{\{EXITCODE\}\}
              output: \{\{OUTPUT\}\}
              errors: \{\{ERRORS\}\}
              summary: \{\{SUMMARY\}\}
    depends_on:
      - build-project
